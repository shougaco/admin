@page "/suppliers"



<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        
        <PageToolbar Title="All Suppliers" BackPath="suppliers" AddPath="suppliers/add" HasAddButton="true" RedirectToHistory="true" />

        <MudItem xs="12" lg="12">
            <MudPaper Elevation="25" Class="p-4">
                <MudTable   Items="@Elements" MultiSelection="true" 
                    Dense="false" Hover="true" HorizontalScrollbar="true"
                    FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"550px":"")"
                    Loading="@_loading" LoadingProgressColor="Color.Info"
                    Filter="new Func<Supplier,bool>(FilterFunc1)" @bind-SelectedItems="selectedItems"
                    RowsPerPage=100
                    Class="mb-3"
                    Elevation="0">

                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Suppliers</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Code</MudTh>
                        <MudTh>Name</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Code" Class='@(selectedItems.Select(s => s.Id).Contains(context.Id) == true ? "fw-bold" : "")'>@context.Code</MudTd>
                        <MudTd DataLabel="Supplier" Class='@(selectedItems.Select(s => s.Id).Contains(context.Id) == true ? "fw-bold" : "")'>@context.Name</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>

                <MudText Inline="true">Selected items: @(selectedItems==null ? "" : string.Join(", ", selectedItems.OrderBy(x=>x.Code).Select(x=>x.Code)))</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    [Parameter] public bool isSuccess { get; set; }

    bool fixed_header = true;
    bool fixed_footer = true;
    private bool _loading = false;
    private string searchString1 = "";
    private HashSet<Supplier> selectedItems = new HashSet<Supplier>();

    private IEnumerable<Supplier> Elements = new List<Supplier>();

    public string CompanyId => !String.IsNullOrEmpty(_stateContainer.Company.Id) ? _stateContainer.Company.Id : "";

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        
        if(!String.IsNullOrEmpty(CompanyId))
        {
            await SetSuppliersAsync();
        }

        
        _loading = false;

        _stateContainer.OnChange += async () =>
        {
            await SetSuppliersAsync();
            await InvokeAsync(StateHasChanged);
        };
    }


    private async Task SetSuppliersAsync()
    {
        try
        {
            Elements = await _client.GetFromJsonAsync<List<Supplier>>($"api/supplier?companyId={_stateContainer.Company.Id}");   
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    

    private bool FilterFunc1(Supplier element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Supplier element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void Navigate(string url)
    {
        _navigationManager.NavigateTo(url);
    }

    private async void GoBackAsync()
    {
        await _jsRuntime.InvokeVoidAsync("history.back");
    }
}

