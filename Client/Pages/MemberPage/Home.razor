@page "/members"


<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>

        <PageToolbar Title="All Members" BackPath="members" AddPath="members/add" HasAddButton="true" RedirectToHistory="true" />

        <MudItem xs="12" lg="12">
            <MudPaper Elevation="25" Class="p-4">
                <MudTable   Items="@Elements" MultiSelection="true" 
                    Dense="false" Hover="true" HorizontalScrollbar="true"
                    FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"550px":"")"
                    Loading="@_loading" LoadingProgressColor="Color.Info"
                    Filter="new Func<Member ,bool>(FilterFunc1)" @bind-SelectedItems="selectedItems"
                    RowsPerPage=100
                    Class="mb-3"
                    Elevation="0">

                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Members</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Username</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Firs Name</MudTh>
                        <MudTh>Last Name</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Username" Class='@(selectedItems.Select(s => s.Id).Contains(context.Id) == true ? "fw-bold" : "")'>@context.ApplicationUser.UserName</MudTd>
                        <MudTd DataLabel="Email" Class='@(selectedItems.Select(s => s.Id).Contains(context.Id) == true ? "fw-bold" : "")'>@context.ApplicationUser.Email</MudTd>
                        <MudTd DataLabel="First Name" Class='@(selectedItems.Select(s => s.Id).Contains(context.Id) == true ? "fw-bold" : "")'>@context.ApplicationUser.FirstName</MudTd>
                        <MudTd DataLabel="Last Name" Class='@(selectedItems.Select(s => s.Id).Contains(context.Id) == true ? "fw-bold" : "")'>@context.ApplicationUser.LastName</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>

                <MudText Inline="true">Selected items: @(selectedItems==null ? "" : string.Join(", ", selectedItems.OrderBy(x=>x.ApplicationUser.UserName).Select(x=>x.ApplicationUser.UserName)))</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>




@code {

    bool fixed_header = true;
    bool fixed_footer = true;
    private bool _loading = false;
    private string searchString1 = "";
    private HashSet<Member> selectedItems1 = new HashSet<Member>();
    private HashSet<Member> selectedItems = new HashSet<Member>();

    private IEnumerable<Member> Elements = new List<Member>();

    public string CompanyId => !String.IsNullOrEmpty(_stateContainer.Company.Id) ? _stateContainer.Company.Id : "";


    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        if(!String.IsNullOrEmpty(CompanyId)) {
            await SetMembersAsync();
        }
        
        
        _loading = false;

        _stateContainer.OnChange += async () =>
        {
            await SetMembersAsync();
            await InvokeAsync(StateHasChanged);
        };
    
    }

    private async Task SetMembersAsync() {
        try
        {
            Elements = await _client.GetFromJsonAsync<List<Member>>($"api/member/filter?companyId={CompanyId}");   
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    

    private bool FilterFunc1(Member element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Member element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ApplicationUser.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ApplicationUser.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void Navigate(string url)
    {
        _navigationManager.NavigateTo(url);
    }

    private async void GoBackAsync()
    {
        await _jsRuntime.InvokeVoidAsync("history.back");
    }
}

