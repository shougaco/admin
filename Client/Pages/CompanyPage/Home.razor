@page "/company/{isSuccess:bool?}"
@attribute [Authorize]


<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12" lg="12">
            <Navigation />
            <MudPaper Elevation="25" >
                <MudToolBar>
                    <MudIconButton Icon="@Icons.Material.Outlined.ArrowBack" Color="Color.Inherit" Class="mr-1" OnClick="GoBackAsync"/>
                    <MudText Class="py-1 text-nowrap" Typo="Typo.body1">Company details</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick='@(() => Navigate("company/add"))' />
                    <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit"/>
                </MudToolBar>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" lg="12">
            <MudPaper Elevation="25" Class="p-4">
                 @if(Company is not null) {
                    <MudText Class="my-3" Align="Align.Left">
                        <b class="me-5">Id</b> 
                        @Company.Id
                    </MudText>
                    <MudText Class="my-3" Align="Align.Left">
                        <b class="me-5">Name</b> 
                        @Company.Name
                    </MudText>
                    <MudText Class="my-3" Align="Align.Left">
                            <b class="me-5">Description</b> 
                            @Company.Description
                    </MudText>
                }
                <MudText Class="my-3" Align="Align.Left">
                <b class="me-5">Your API Key</b> 
                @if(ApiKey is null) {
                    <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary">Generate API Key</MudButton>
                }
                else {
                    @ApiKey.Key
                }

                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>



@code {

    public string CompanyId => !String.IsNullOrEmpty(_stateContainer.Company.Id) ? _stateContainer.Company.Id : "";
    public string Slug => !String.IsNullOrEmpty(_stateContainer.Company.Slug) ? _stateContainer.Company.Slug : "";
    public static Company Company = new Company();
    public ApiKey ApiKey { get; set; }

    [Parameter] public bool isSuccess { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(isSuccess) {
            Snackbar.Add($"{Company.Name} is now created", Severity.Success);
            _navigationManager.NavigateTo("company");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if(!String.IsNullOrEmpty(CompanyId)) {
            await SetCompanyAsync();
        }
        
        

        _stateContainer.OnChange += async () =>
        {
            await SetCompanyAsync();
            await InvokeAsync(StateHasChanged);
        };
    }

    private async Task SetCompanyAsync()
    {
        try 
        {
            Company = await _client.GetFromJsonAsync<Company>($"api/company/{CompanyId}");
            ApiKey = await _client.GetFromJsonAsync<ApiKey>($"api/apikey/filter?companyId={CompanyId}");     
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void Navigate(string url)
    {
        _navigationManager.NavigateTo(url);
    }

    private async void GoBackAsync()
    {
        await _jsRuntime.InvokeVoidAsync("history.back");
    }
}